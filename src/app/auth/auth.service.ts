import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError, BehaviorSubject } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { User } from './user.model';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/users'; // Adjust if your json-server URL is different
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();

  constructor(private http: HttpClient) {
    // Optionally load user from local storage on service init
    const storedUser = localStorage.getItem('currentUser');
    if (storedUser) {
      this.currentUserSubject.next(JSON.parse(storedUser));
    }
  }

  login(email: string, password_plaintext: string): Observable<User | null> {
    // In a real app, you'd POST credentials to a /login endpoint.
    // With json-server, we fetch users by email and then check the password.
    // THIS IS INSECURE and for demonstration purposes only.
    return this.http.get<User[]>(`${this.apiUrl}?email=${email}`).pipe(
      map(users => {
        if (users.length > 0) {
          const user = users[0];
          // Directly comparing plaintext passwords - insecure!
          if (user.password === password_plaintext) {
            this.setCurrentUser(user);
            return user;
          }
        }
        return null; // Login failed (user not found or password mismatch)
      }),
      catchError(this.handleError)
    );
  }

  register(userData: Partial<User>): Observable<User> {
    const userToRegister: User = {
      ...userData,
      role: 'USER', // Default role
      // id will be auto-generated by json-server
    } as User;

    // Ensure password is included for registration
    if (!userData.password) {
        return throwError(() => new Error('Password is required for registration.'));
    }

    return this.http.post<User>(this.apiUrl, userToRegister).pipe(
      tap(user => {
        this.setCurrentUser(user);
      }),
      catchError(this.handleError)
    );
  }

  logout(): void {
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  private setCurrentUser(user: User | null): void {
    if (user) {
      // Store user details (excluding password for security if it were real)
      const userToStore = { ...user };
      delete userToStore.password;
      localStorage.setItem('currentUser', JSON.stringify(userToStore));
    }
    this.currentUserSubject.next(user);
  }

  public get currentUserValue(): User | null {
    return this.currentUserSubject.value;
  }

  private handleError(error: any) {
    console.error('API Error: ', error);
    return throwError(() => new Error('An error occurred. Please try again.'));
  }
}
